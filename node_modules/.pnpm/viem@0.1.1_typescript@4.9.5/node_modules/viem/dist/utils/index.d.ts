import { Address } from 'abitype';
export { ParseAbi, ParseAbiItem, ParseAbiParameter, ParseAbiParameters, parseAbi, parseAbiItem, parseAbiParameter, parseAbiParameters } from 'abitype';
export { D as DecodeAbiParametersReturnType, E as EncodeAbiParametersReturnType, G as GetAbiItemParameters, d as decodeAbiParameters, e as encodeAbiParameters, g as getAbiItem } from '../getAbiItem-de103f9b.js';
export { D as DecodeErrorResultParameters, a as DecodeErrorResultReturnType, b as DecodeEventLogParameters, c as DecodeEventLogReturnType, d as DecodeFunctionDataParameters, e as DecodeFunctionResultParameters, f as DecodeFunctionResultReturnType, E as EncodeDeployDataParameters, g as EncodeErrorResultParameters, h as EncodeEventTopicsParameters, i as EncodeFunctionDataParameters, j as EncodeFunctionResultParameters, k as decodeErrorResult, l as decodeEventLog, m as decodeFunctionData, n as decodeFunctionResult, o as encodeDeployData, p as encodeErrorResult, q as encodeEventTopics, r as encodeFunctionData, s as encodeFunctionResult } from '../encodeFunctionResult-12963e93.js';
export { e as encodePacked } from '../encodePacked-98b20b4d.js';
export { a as formatAbiItem, f as formatAbiItemWithArgs } from '../formatAbiItem-8ee3a7fa.js';
import { B as BaseError, C as CallExecutionError, E as EstimateGasExecutionError, d as ExecutionRevertedError, F as FeeCapTooHighError, e as FeeCapTooLowError, h as NonceTooHighError, i as NonceTooLowError, N as NonceMaxValueError, I as InsufficientFundsError, f as IntrinsicGasTooHighError, g as IntrinsicGasTooLowError, l as TransactionTypeNotSupportedError, T as TipAboveFeeCapError, U as UnknownNodeError, k as TransactionExecutionError } from '../parseGwei-23d1c213.js';
export { G as GetContractAddressOptions, o as GetCreate2AddressOptions, p as GetCreateAddressOptions, H as HttpOptions, R as RpcResponse, ap as Socket, q as ToRlpReturnType, r as boolToBytes, s as boolToHex, t as bytesToBigint, u as bytesToBool, v as bytesToHex, w as bytesToNumber, x as bytesToString, y as formatEther, z as formatGwei, A as formatUnits, D as fromBytes, J as fromHex, K as fromRlp, L as getAccount, M as getAddress, O as getContractAddress, P as getContractError, Q as getCreate2Address, S as getCreateAddress, V as getEventSelector, X as getFunctionSelector, aq as getSocket, Y as hexToBigInt, Z as hexToBool, _ as hexToBytes, $ as hexToNumber, a0 as hexToString, a1 as isAddress, a2 as isAddressEqual, a3 as isBytes, a4 as isHex, a5 as keccak256, a6 as numberToBytes, a7 as numberToHex, a8 as pad, a9 as padBytes, aa as padHex, ab as parseEther, ac as parseGwei, ad as parseUnits, ar as rpc, ae as size, af as slice, ag as sliceBytes, ah as sliceHex, ai as stringToBytes, aj as stringToHex, ak as stringify, al as toBytes, am as toHex, an as toRlp, ao as trim } from '../parseGwei-23d1c213.js';
export { d as defineChain } from '../chain-688e1663.js';
import { S as Formatter, C as Chain } from '../chain-d64be356.js';
export { I as ExtractFormatter, J as Formatted, K as FormattedTransaction, M as TransactionFormatter, ac as defineFormatter, N as defineTransaction, ad as format, O as formatTransaction, P as transactionType } from '../chain-d64be356.js';
import { C as CallParameters, E as EstimateGasParameters, S as SendTransactionParameters, W as WalletClient, P as PublicClient } from '../createPublicClient-c13b17f9.js';
export { B as BlockFormatter, F as FormattedBlock, e as FormattedTransactionReceipt, f as FormattedTransactionRequest, T as TransactionReceiptFormatter, g as TransactionRequestFormatter, h as defineBlock, i as defineTransactionReceipt, j as defineTransactionRequest, k as formatBlock, l as formatTransactionRequest } from '../createPublicClient-c13b17f9.js';
import 'isomorphic-ws';
import '@wagmi/chains';
import '../eip1193-029d52f0.js';
import '../createClient-8575dcd6.js';

declare function buildRequest<TRequest extends (args: any) => Promise<any>>(request: TRequest, { retryDelay, retryCount, }?: {
    retryDelay?: number;
    retryCount?: number;
}): TRequest;

declare function extractFunctionParts(def: string): {
    type: string | undefined;
    name: string | undefined;
    params: string | undefined;
};
declare function extractFunctionName(def: string): string | undefined;
declare function extractFunctionParams(def: string): {
    indexed?: boolean | undefined;
    type: string;
    name: string;
}[] | undefined;
declare function extractFunctionType(def: string): string | undefined;

/**
 * @description Picks out the keys from `value` that exist in the formatter.
 */
declare function extract(value: Record<string, unknown>, { formatter }: {
    formatter?: Formatter;
}): {};

declare function getCallError(err: BaseError, { docsPath, ...args }: CallParameters & {
    chain?: Chain;
    docsPath?: string;
}): CallExecutionError;

declare function getEstimateGasError(err: BaseError, { docsPath, ...args }: EstimateGasParameters & {
    chain?: Chain;
    docsPath?: string;
}): EstimateGasExecutionError;

declare function containsNodeError(err: BaseError): boolean;
declare function getNodeError(err: BaseError, args: Partial<SendTransactionParameters<any>>): ExecutionRevertedError | FeeCapTooHighError | FeeCapTooLowError | NonceTooHighError | NonceTooLowError | NonceMaxValueError | InsufficientFundsError | IntrinsicGasTooHighError | IntrinsicGasTooLowError | TransactionTypeNotSupportedError | TipAboveFeeCapError | UnknownNodeError;

declare function getTransactionError(err: BaseError, { docsPath, ...args }: SendTransactionParameters & {
    docsPath?: string;
}): TransactionExecutionError;

declare const arrayRegex: RegExp;
declare const bytesRegex: RegExp;
declare const integerRegex: RegExp;

declare function assertRequest(args: Partial<SendTransactionParameters<Chain>>): void;

type PrepareRequestParameters<TParameters extends SendTransactionParameters = SendTransactionParameters> = TParameters;
type PrepareRequestReturnType<TParameters extends SendTransactionParameters = SendTransactionParameters> = TParameters & {
    from: Address;
    gas: SendTransactionParameters['gas'];
    gasPrice?: SendTransactionParameters['gasPrice'];
    maxFeePerGas?: SendTransactionParameters['maxFeePerGas'];
    maxPriorityFeePerGas?: SendTransactionParameters['maxPriorityFeePerGas'];
    nonce: SendTransactionParameters['nonce'];
};
declare function prepareRequest<TParameters extends SendTransactionParameters>(client: WalletClient<any, any> | PublicClient<any, any>, args: PrepareRequestParameters<TParameters>): Promise<PrepareRequestReturnType<TParameters>>;

export { arrayRegex, assertRequest, buildRequest, bytesRegex, containsNodeError, extract, extractFunctionName, extractFunctionParams, extractFunctionParts, extractFunctionType, getCallError, getEstimateGasError, getNodeError, getTransactionError, integerRegex, prepareRequest };
