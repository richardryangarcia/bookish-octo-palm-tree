import { T as TransportConfig, a as Transport, B as BaseRpcRequests } from './createClient-8575dcd6.js';
export { C as Client, b as ClientConfig, a as Transport, T as TransportConfig, c as createClient, d as createTransport } from './createClient-8575dcd6.js';
import { H as Hex, a as Hash, C as Chain, B as ByteArray } from './chain-d64be356.js';
export { A as AbiItem, b as AccessList, c as Block, d as BlockIdentifier, e as BlockNumber, f as BlockTag, B as ByteArray, C as Chain, g as ContractConfig, I as ExtractFormatter, F as FeeHistory, h as FeeValues, i as FeeValuesEIP1559, j as FeeValuesLegacy, J as Formatted, K as FormattedTransaction, a as Hash, H as Hex, L as Log, R as RpcBlock, k as RpcBlockIdentifier, l as RpcBlockNumber, m as RpcFeeHistory, n as RpcFeeValues, o as RpcLog, p as RpcTransaction, q as RpcTransactionReceipt, r as RpcTransactionRequest, s as RpcUncle, y as Transaction, z as TransactionBase, D as TransactionEIP1559, E as TransactionEIP2930, M as TransactionFormatter, G as TransactionLegacy, T as TransactionReceipt, t as TransactionRequest, u as TransactionRequestBase, v as TransactionRequestEIP1559, w as TransactionRequestEIP2930, x as TransactionRequestLegacy, U as Uncle, N as defineTransaction, O as formatTransaction, P as transactionType } from './chain-d64be356.js';
import { B as BaseError, H as HttpOptions, R as RpcResponse } from './parseGwei-f91ad655.js';
export { B as BaseError, C as CallExecutionError, a as ContractFunctionExecutionError, b as ContractFunctionRevertedError, c as ContractFunctionZeroDataError, E as EstimateGasExecutionError, d as ExecutionRevertedError, F as FeeCapTooHighError, e as FeeCapTooLowError, G as GetContractAddressOptions, o as GetCreate2AddressOptions, p as GetCreateAddressOptions, I as InsufficientFundsError, f as IntrinsicGasTooHighError, g as IntrinsicGasTooLowError, N as NonceMaxValueError, h as NonceTooHighError, i as NonceTooLowError, j as RawContractError, T as TipAboveFeeCapError, q as ToRlpReturnType, k as TransactionExecutionError, m as TransactionNotFoundError, n as TransactionReceiptNotFoundError, l as TransactionTypeNotSupportedError, U as UnknownNodeError, W as WaitForTransactionReceiptTimeoutError, r as boolToBytes, s as boolToHex, t as bytesToBigint, u as bytesToBool, v as bytesToHex, w as bytesToNumber, x as bytesToString, y as formatEther, z as formatGwei, A as formatUnits, D as fromBytes, J as fromHex, K as fromRlp, L as getAccount, M as getAddress, O as getContractAddress, P as getContractError, Q as getCreate2Address, S as getCreateAddress, V as getEventSelector, X as getFunctionSelector, Y as hexToBigInt, Z as hexToBool, _ as hexToBytes, $ as hexToNumber, a0 as hexToString, a1 as isAddress, a2 as isAddressEqual, a3 as isBytes, a4 as isHex, a5 as keccak256, a6 as numberToBytes, a7 as numberToHex, a8 as pad, a9 as padBytes, aa as padHex, ab as parseEther, ac as parseGwei, ad as parseUnits, ae as size, af as slice, ag as sliceBytes, ah as sliceHex, ai as stringToBytes, aj as stringToHex, ak as stringify, al as toBytes, am as toHex, an as toRlp, ao as trim } from './parseGwei-f91ad655.js';
import WebSocket from 'isomorphic-ws';
export { A as Account, B as BlockFormatter, F as FormattedBlock, e as FormattedTransactionReceipt, f as FormattedTransactionRequest, J as JsonRpcAccount, L as LocalAccount, P as PublicClient, a as PublicClientConfig, T as TransactionReceiptFormatter, g as TransactionRequestFormatter, W as WalletClient, b as WalletClientConfig, c as createPublicClient, d as createWalletClient, h as defineBlock, i as defineTransactionReceipt, j as defineTransactionRequest, k as formatBlock, l as formatTransactionRequest } from './createPublicClient-c13b17f9.js';
export { T as TestClient, a as TestClientConfig, c as createTestClient } from './test-f964519b.js';
export { Address, ParseAbi, ParseAbiItem, ParseAbiParameter, ParseAbiParameters, parseAbi, parseAbiItem, parseAbiParameter, parseAbiParameters } from 'abitype';
export { l as labelhash, n as namehash } from './namehash-afff0feb.js';
export { D as DecodeAbiParametersReturnType, E as EncodeAbiParametersReturnType, G as GetAbiItemParameters, d as decodeAbiParameters, e as encodeAbiParameters, g as getAbiItem } from './getAbiItem-de103f9b.js';
export { D as DecodeErrorResultParameters, a as DecodeErrorResultReturnType, b as DecodeEventLogParameters, c as DecodeEventLogReturnType, d as DecodeFunctionDataParameters, e as DecodeFunctionResultParameters, f as DecodeFunctionResultReturnType, E as EncodeDeployDataParameters, g as EncodeErrorResultParameters, h as EncodeEventTopicsParameters, i as EncodeFunctionDataParameters, j as EncodeFunctionResultParameters, k as decodeErrorResult, l as decodeEventLog, m as decodeFunctionData, n as decodeFunctionResult, o as encodeDeployData, p as encodeErrorResult, q as encodeEventTopics, r as encodeFunctionData, s as encodeFunctionResult } from './encodeFunctionResult-12963e93.js';
export { e as encodePacked } from './encodePacked-98b20b4d.js';
export { d as defineChain } from './chain-688e1663.js';
import './eip1193-029d52f0.js';
import '@wagmi/chains';

declare class AbiConstructorNotFoundError extends BaseError {
    name: string;
    constructor({ docsPath }: {
        docsPath: string;
    });
}
declare class AbiConstructorParamsNotFoundError extends BaseError {
    name: string;
    constructor({ docsPath }: {
        docsPath: string;
    });
}
declare class AbiDecodingDataSizeInvalidError extends BaseError {
    name: string;
    constructor(size: number);
}
declare class AbiDecodingZeroDataError extends BaseError {
    name: string;
    constructor();
}
declare class AbiEncodingArrayLengthMismatchError extends BaseError {
    name: string;
    constructor({ expectedLength, givenLength, type, }: {
        expectedLength: number;
        givenLength: number;
        type: string;
    });
}
declare class AbiEncodingLengthMismatchError extends BaseError {
    name: string;
    constructor({ expectedLength, givenLength, }: {
        expectedLength: number;
        givenLength: number;
    });
}
declare class AbiErrorInputsNotFoundError extends BaseError {
    name: string;
    constructor(errorName: string, { docsPath }: {
        docsPath: string;
    });
}
declare class AbiErrorNotFoundError extends BaseError {
    name: string;
    constructor(errorName: string, { docsPath }: {
        docsPath: string;
    });
}
declare class AbiErrorSignatureNotFoundError extends BaseError {
    name: string;
    constructor(signature: Hex, { docsPath }: {
        docsPath: string;
    });
}
declare class AbiEventSignatureNotFoundError extends BaseError {
    name: string;
    constructor(signature: Hex, { docsPath }: {
        docsPath: string;
    });
}
declare class AbiEventNotFoundError extends BaseError {
    name: string;
    constructor(eventName: string, { docsPath }: {
        docsPath: string;
    });
}
declare class AbiFunctionNotFoundError extends BaseError {
    name: string;
    constructor(functionName: string, { docsPath }: {
        docsPath: string;
    });
}
declare class AbiFunctionOutputsNotFoundError extends BaseError {
    name: string;
    constructor(functionName: string, { docsPath }: {
        docsPath: string;
    });
}
declare class AbiFunctionSignatureNotFoundError extends BaseError {
    name: string;
    constructor(signature: Hex, { docsPath }: {
        docsPath: string;
    });
}
declare class InvalidAbiEncodingTypeError extends BaseError {
    name: string;
    constructor(type: string, { docsPath }: {
        docsPath: string;
    });
}
declare class InvalidAbiDecodingTypeError extends BaseError {
    name: string;
    constructor(type: string, { docsPath }: {
        docsPath: string;
    });
}
declare class InvalidArrayError extends BaseError {
    name: string;
    constructor(value: unknown);
}
declare class InvalidDefinitionTypeError extends BaseError {
    name: string;
    constructor(type: string);
}

declare class InvalidAddressError extends BaseError {
    name: string;
    constructor({ address }: {
        address: string;
    });
}

declare class BlockNotFoundError extends BaseError {
    name: string;
    constructor({ blockHash, blockNumber, }: {
        blockHash?: Hash;
        blockNumber?: bigint;
    });
}

declare class ChainDoesNotSupportContract extends BaseError {
    name: string;
    constructor({ blockNumber, chain, contract, }: {
        blockNumber?: bigint;
        chain: Chain;
        contract: {
            name: string;
            blockCreated?: number;
        };
    });
}

declare class SizeExceedsPaddingSizeError extends BaseError {
    name: string;
    constructor({ size, targetSize, type, }: {
        size: number;
        targetSize: number;
        type: 'hex' | 'bytes';
    });
}

declare class DataLengthTooLongError extends BaseError {
    name: string;
    constructor({ consumed, length }: {
        consumed: number;
        length: number;
    });
}
declare class DataLengthTooShortError extends BaseError {
    name: string;
    constructor({ length, dataLength }: {
        length: number;
        dataLength: number;
    });
}
declare class InvalidBytesBooleanError extends BaseError {
    name: string;
    constructor(bytes: ByteArray);
}
declare class InvalidHexBooleanError extends BaseError {
    name: string;
    constructor(hex: Hex);
}
declare class InvalidHexValueError extends BaseError {
    name: string;
    constructor(value: Hex);
}
declare class OffsetOutOfBoundsError extends BaseError {
    name: string;
    constructor({ nextOffset, offset }: {
        nextOffset: number;
        offset: number;
    });
}

declare class FilterTypeNotSupportedError extends BaseError {
    name: string;
    constructor(type: string);
}

declare class HttpRequestError extends BaseError {
    name: string;
    body: {
        [key: string]: unknown;
    };
    headers?: Headers;
    status?: number;
    url: string;
    constructor({ body, details, headers, status, url, }: {
        body: {
            [key: string]: unknown;
        };
        details?: string;
        headers?: Headers;
        status?: number;
        url: string;
    });
}
declare class WebSocketRequestError extends BaseError {
    name: string;
    constructor({ body, details, url, }: {
        body: {
            [key: string]: unknown;
        };
        details: string;
        url: string;
    });
}
declare class RpcError extends BaseError {
    code: number;
    name: string;
    constructor({ body, error, url, }: {
        body: {
            [key: string]: unknown;
        };
        error: {
            code: number;
            message: string;
        };
        url: string;
    });
}
declare class TimeoutError extends BaseError {
    name: string;
    constructor({ body, url, }: {
        body: {
            [key: string]: unknown;
        };
        url: string;
    });
}

declare class RequestError extends BaseError {
    constructor(err: Error, { docsPath, metaMessages, shortMessage, }: {
        docsPath?: string;
        metaMessages?: string[];
        shortMessage: string;
    });
}
declare class RpcRequestError extends RequestError {
    code: number;
    constructor(err: RpcError, { docsPath, shortMessage }: {
        docsPath?: string;
        shortMessage: string;
    });
}
declare class ParseRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class InvalidRequestRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class MethodNotFoundRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class InvalidParamsRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class InternalRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class InvalidInputRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class ResourceNotFoundRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class ResourceUnavailableRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class TransactionRejectedRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class MethodNotSupportedRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class LimitExceededRpcError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class JsonRpcVersionUnsupportedError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class UserRejectedRequestError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class SwitchChainError extends RpcRequestError {
    name: string;
    code: number;
    constructor(err: RpcError);
}
declare class UnknownRpcError extends RequestError {
    name: string;
    constructor(err: Error);
}

declare class UrlRequiredError extends BaseError {
    constructor();
}

type EthereumProvider = {
    request: BaseRpcRequests['request'];
};
type CustomTransportConfig = {
    /** The key of the transport. */
    key?: TransportConfig['key'];
    /** The name of the transport. */
    name?: TransportConfig['name'];
    /** The max number of times to retry. */
    retryCount?: TransportConfig['retryCount'];
    /** The base delay (in ms) between retries. */
    retryDelay?: TransportConfig['retryDelay'];
};
type CustomTransport = Transport<'custom', EthereumProvider['request']>;
/**
 * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.
 */
declare function custom<TProvider extends EthereumProvider>(provider: TProvider, config?: CustomTransportConfig): CustomTransport;

type FallbackTransportConfig = {
    /** The key of the Fallback transport. */
    key?: TransportConfig['key'];
    /** The name of the Fallback transport. */
    name?: TransportConfig['name'];
    /** The max number of times to retry. */
    retryCount?: TransportConfig['retryCount'];
    /** The base delay (in ms) between retries. */
    retryDelay?: TransportConfig['retryDelay'];
};
type FallbackTransport = Transport<'fallback', {
    transports: Transport[];
}>;
declare function fallback(transports: Transport[], config?: FallbackTransportConfig): FallbackTransport;

type HttpTransportConfig = {
    /**
     * Request configuration to pass to `fetch`.
     * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch
     */
    fetchOptions?: HttpOptions['fetchOptions'];
    /** The key of the HTTP transport. */
    key?: TransportConfig['key'];
    /** The name of the HTTP transport. */
    name?: TransportConfig['name'];
    /** The max number of times to retry. */
    retryCount?: TransportConfig['retryCount'];
    /** The base delay (in ms) between retries. */
    retryDelay?: TransportConfig['retryDelay'];
    /** The timeout (in ms) for the HTTP request. Default: 10_000 */
    timeout?: TransportConfig['timeout'];
};
type HttpTransport = Transport<'http', {
    url?: string;
}>;
/**
 * @description Creates a HTTP transport that connects to a JSON-RPC API.
 */
declare function http(
/** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */
url?: string, config?: HttpTransportConfig): HttpTransport;

type WebSocketTransportSubscribeParameters = {
    onData: (data: RpcResponse) => void;
    onError?: (error: any) => void;
};
type WebSocketTransportSubscribeReturnType = {
    subscriptionId: Hash;
    unsubscribe: () => Promise<RpcResponse<boolean>>;
};
type WebSocketTransportSubscribe = {
    subscribe(args: WebSocketTransportSubscribeParameters & {
        /**
         * @description Add information about compiled contracts
         * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_addcompilationresult
         */
        params: ['newHeads'];
    }): Promise<WebSocketTransportSubscribeReturnType>;
};
type WebSocketTransportConfig = {
    /** The key of the WebSocket transport. */
    key?: TransportConfig['key'];
    /** The name of the WebSocket transport. */
    name?: TransportConfig['name'];
    /** The max number of times to retry. */
    retryCount?: TransportConfig['retryCount'];
    /** The base delay (in ms) between retries. */
    retryDelay?: TransportConfig['retryDelay'];
    /** The timeout (in ms) for async WebSocket requests. Default: 10_000 */
    timeout?: TransportConfig['timeout'];
};
type WebSocketTransport = Transport<'webSocket', {
    getSocket(): Promise<WebSocket>;
    subscribe: WebSocketTransportSubscribe['subscribe'];
}>;
/**
 * @description Creates a WebSocket transport that connects to a JSON-RPC API.
 */
declare function webSocket(
/** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */
url?: string, config?: WebSocketTransportConfig): WebSocketTransport;

declare const multicall3Abi: readonly [{
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly name: "allowFailure";
            readonly type: "bool";
        }, {
            readonly name: "callData";
            readonly type: "bytes";
        }];
        readonly name: "calls";
        readonly type: "tuple[]";
    }];
    readonly name: "aggregate3";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly name: "success";
            readonly type: "bool";
        }, {
            readonly name: "returnData";
            readonly type: "bytes";
        }];
        readonly name: "returnData";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];

declare const etherUnits: {
    gwei: number;
    wei: number;
};
declare const gweiUnits: {
    ether: number;
    wei: number;
};
declare const weiUnits: {
    ether: number;
    gwei: number;
};

export { AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError, AbiDecodingDataSizeInvalidError, AbiDecodingZeroDataError, AbiEncodingArrayLengthMismatchError, AbiEncodingLengthMismatchError, AbiErrorInputsNotFoundError, AbiErrorNotFoundError, AbiErrorSignatureNotFoundError, AbiEventNotFoundError, AbiEventSignatureNotFoundError, AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, AbiFunctionSignatureNotFoundError, BlockNotFoundError, ChainDoesNotSupportContract, CustomTransport, CustomTransportConfig, DataLengthTooLongError, DataLengthTooShortError, FallbackTransport, FallbackTransportConfig, FilterTypeNotSupportedError, HttpRequestError, HttpTransport, HttpTransportConfig, InternalRpcError, InvalidAbiDecodingTypeError, InvalidAbiEncodingTypeError, InvalidAddressError, InvalidArrayError, InvalidBytesBooleanError, InvalidDefinitionTypeError, InvalidHexBooleanError, InvalidHexValueError, InvalidInputRpcError, InvalidParamsRpcError, InvalidRequestRpcError, JsonRpcVersionUnsupportedError, LimitExceededRpcError, MethodNotFoundRpcError, MethodNotSupportedRpcError, OffsetOutOfBoundsError, ParseRpcError, RequestError, ResourceNotFoundRpcError, ResourceUnavailableRpcError, RpcError, RpcRequestError, SizeExceedsPaddingSizeError, SwitchChainError, TimeoutError, TransactionRejectedRpcError, UnknownRpcError, UrlRequiredError, UserRejectedRequestError, WebSocketRequestError, WebSocketTransport, WebSocketTransportConfig, custom, etherUnits, fallback, gweiUnits, http, multicall3Abi, webSocket, weiUnits };
