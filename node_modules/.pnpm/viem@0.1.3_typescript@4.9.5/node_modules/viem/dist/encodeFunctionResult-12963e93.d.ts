import { Abi, Narrow } from 'abitype';
import { H as Hex, A as AbiItem, a7 as LogTopic, a0 as ExtractEventNameFromAbi, a8 as ExtractEventArgsFromTopics, a9 as ExtractFunctionNameFromAbi, a6 as ExtractArgsFromAbi, Z as ExtractResultFromAbi, X as ExtractConstructorArgsFromAbi, aa as ExtractErrorNameFromAbi, ab as ExtractErrorArgsFromAbi, a1 as ExtractEventArgsFromAbi } from './chain-d64be356.js';

type DecodeErrorResultParameters = {
    abi?: Abi;
    data: Hex;
};
type DecodeErrorResultReturnType = {
    abiItem: AbiItem;
    errorName: string;
    args?: readonly unknown[];
};
declare function decodeErrorResult({ abi, data, }: DecodeErrorResultParameters): DecodeErrorResultReturnType;

type DecodeEventLogParameters<TAbi extends Abi | readonly unknown[] = Abi, TEventName extends string = string, TTopics extends LogTopic[] = LogTopic[], TData extends Hex | undefined = undefined> = {
    abi: Narrow<TAbi>;
    data?: TData;
    eventName?: ExtractEventNameFromAbi<TAbi, TEventName>;
    topics: [signature: Hex, ...args: TTopics];
};
type DecodeEventLogReturnType<TAbi extends Abi | readonly unknown[] = Abi, TEventName extends string = string, TTopics extends LogTopic[] = LogTopic[], TData extends Hex | undefined = undefined> = {
    eventName: TEventName;
} & ExtractEventArgsFromTopics<TAbi, TEventName, TTopics, TData>;
declare function decodeEventLog<TAbi extends Abi | readonly unknown[], TEventName extends string, TTopics extends LogTopic[], TData extends Hex | undefined = undefined>({ abi, data, topics, }: DecodeEventLogParameters<TAbi, TEventName, TTopics, TData>): DecodeEventLogReturnType<TAbi, TEventName, TTopics, TData>;

type DecodeFunctionDataParameters = {
    abi: Abi | readonly unknown[];
    data: Hex;
};
declare function decodeFunctionData({ abi, data, }: DecodeFunctionDataParameters): {
    functionName: string;
    args: readonly unknown[] | undefined;
};

type DecodeFunctionResultParameters<TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string> = {
    abi: Narrow<TAbi>;
    functionName: ExtractFunctionNameFromAbi<TAbi, TFunctionName>;
    data: Hex;
} & Partial<ExtractArgsFromAbi<TAbi, TFunctionName>>;
type DecodeFunctionResultReturnType<TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string> = ExtractResultFromAbi<TAbi, TFunctionName>;
declare function decodeFunctionResult<TAbi extends Abi | readonly unknown[], TFunctionName extends string>({ abi, args, functionName, data, }: DecodeFunctionResultParameters<TAbi, TFunctionName>): DecodeFunctionResultReturnType<TAbi, TFunctionName>;

type EncodeDeployDataParameters<TAbi extends Abi | readonly unknown[] = Abi> = {
    abi: Narrow<TAbi>;
    bytecode: Hex;
} & ExtractConstructorArgsFromAbi<TAbi>;
declare function encodeDeployData<TAbi extends Abi | readonly unknown[]>({ abi, args, bytecode, }: EncodeDeployDataParameters<TAbi>): `0x${string}`;

type EncodeErrorResultParameters<TAbi extends Abi | readonly unknown[] = Abi, TErrorName extends string = string> = {
    abi: Narrow<TAbi>;
    errorName: ExtractErrorNameFromAbi<TAbi, TErrorName>;
} & ExtractErrorArgsFromAbi<TAbi, TErrorName>;
declare function encodeErrorResult<TAbi extends Abi | readonly unknown[], TErrorName extends string>({ abi, errorName, args }: EncodeErrorResultParameters<TAbi, TErrorName>): `0x${string}`;

type EncodeEventTopicsParameters<TAbi extends Abi | readonly unknown[] = Abi, TEventName extends string = string> = {
    abi: Narrow<TAbi>;
    args?: ExtractEventArgsFromAbi<TAbi, TEventName>;
    eventName: ExtractEventNameFromAbi<TAbi, TEventName>;
};
declare function encodeEventTopics<TAbi extends Abi | readonly unknown[], TEventName extends string>({ abi, eventName, args }: EncodeEventTopicsParameters<TAbi, TEventName>): `0x${string}`[];

type EncodeFunctionDataParameters<TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string> = {
    abi: Narrow<TAbi>;
    functionName: ExtractFunctionNameFromAbi<TAbi, TFunctionName>;
} & ExtractArgsFromAbi<TAbi, TFunctionName>;
declare function encodeFunctionData<TAbi extends Abi | readonly unknown[], TFunctionName extends string>({ abi, args, functionName, }: EncodeFunctionDataParameters<TAbi, TFunctionName>): `0x${string}`;

type EncodeFunctionResultParameters<TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string> = {
    abi: Narrow<TAbi>;
    functionName: ExtractFunctionNameFromAbi<TAbi, TFunctionName>;
    result?: ExtractResultFromAbi<TAbi, TFunctionName>;
};
declare function encodeFunctionResult<TAbi extends Abi | readonly unknown[], TFunctionName extends string>({ abi, functionName, result, }: EncodeFunctionResultParameters<TAbi, TFunctionName>): `0x${string}`;

export { DecodeErrorResultParameters as D, EncodeDeployDataParameters as E, DecodeErrorResultReturnType as a, DecodeEventLogParameters as b, DecodeEventLogReturnType as c, DecodeFunctionDataParameters as d, DecodeFunctionResultParameters as e, DecodeFunctionResultReturnType as f, EncodeErrorResultParameters as g, EncodeEventTopicsParameters as h, EncodeFunctionDataParameters as i, EncodeFunctionResultParameters as j, decodeErrorResult as k, decodeEventLog as l, decodeFunctionData as m, decodeFunctionResult as n, encodeDeployData as o, encodeErrorResult as p, encodeEventTopics as q, encodeFunctionData as r, encodeFunctionResult as s };
