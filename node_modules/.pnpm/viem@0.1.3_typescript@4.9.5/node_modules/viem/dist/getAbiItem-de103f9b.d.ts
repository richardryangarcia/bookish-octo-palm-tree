import { AbiParameter, AbiParametersToPrimitiveTypes, Narrow, Abi } from 'abitype';
import { H as Hex, a5 as ExtractNameFromAbi, a6 as ExtractArgsFromAbi } from './chain-d64be356.js';

type DecodeAbiParametersReturnType<TParams extends readonly AbiParameter[] | readonly unknown[] = readonly AbiParameter[]> = AbiParametersToPrimitiveTypes<TParams extends readonly AbiParameter[] ? TParams : AbiParameter[]>;
declare function decodeAbiParameters<TParams extends readonly AbiParameter[] | readonly unknown[]>(params: Narrow<TParams>, data: Hex): DecodeAbiParametersReturnType<TParams>;

type EncodeAbiParametersReturnType = Hex;
/**
 * @description Encodes a list of primitive values into an ABI-encoded hex value.
 */
declare function encodeAbiParameters<TParams extends readonly AbiParameter[] | readonly unknown[]>(params: Narrow<TParams>, values: TParams extends readonly AbiParameter[] ? AbiParametersToPrimitiveTypes<TParams> : never): EncodeAbiParametersReturnType;

type GetAbiItemParameters<TAbi extends Abi | readonly unknown[] = Abi, TItemName extends string = string> = {
    abi: Narrow<TAbi>;
    name: ExtractNameFromAbi<TAbi, TItemName>;
} & Partial<ExtractArgsFromAbi<TAbi, TItemName>>;
type GetAbiItemReturnType<TAbi extends Abi | readonly unknown[] = Abi, TItemName extends string = string> = Extract<TAbi[number], {
    name: TItemName;
}>;
declare function getAbiItem<TAbi extends Abi | readonly unknown[], TItemName extends string, TReturnType = GetAbiItemReturnType<TAbi, TItemName>>({ abi, args, name, }: GetAbiItemParameters<TAbi, TItemName>): TReturnType;

export { DecodeAbiParametersReturnType as D, EncodeAbiParametersReturnType as E, GetAbiItemParameters as G, decodeAbiParameters as d, encodeAbiParameters as e, getAbiItem as g };
