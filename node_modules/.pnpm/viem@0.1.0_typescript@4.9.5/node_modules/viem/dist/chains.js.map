{"version":3,"sources":["../src/chains.ts"],"names":["arbitrum","arbitrumGoerli","aurora","avalanche","avalancheFuji","bronos","bronosTestnet","bsc","bscTestnet","canto","celo","celoAlfajores","crossbell","evmos","evmosTestnet","fantom","fantomTestnet","filecoin","foundry","goerli","gnosis","gnosisChiado","hardhat","iotex","iotexTestnet","localhost","mainnet","metis","metisGoerli","optimism","optimismGoerli","polygon","polygonMumbai","sepolia","taraxa","taraxaTestnet","zkSync","zkSyncTestnet"],"mappings":";;;;;;;;;AAAA,YAAY,YAAY;AAcxB,IAAM,iBAAiB;AAAA,EACrB,OAAO,YAAY;AAAA,IACjB,SAAS,CAAC,cAAc,YAAY,WAAW,SAAS,QAAQ;AAAA,IAChE,QAAQ,CAAC,WAAW;AAAA,MAClB,YAAY,MAAM;AAAA,IAIpB;AAAA,EACF,CAAC;AAAA,EACD,aAAa,kBAAkB;AAAA,IAC7B,QAAQ,CAAC,iBAAiB;AAAA,MACxB,aAAa,YAAY;AAAA,MACzB,YAAY,YAAY,aACpB,OAAO,YAAY,UAAsB,IACzC;AAAA,MACJ,qBAAqB,YAAY;AAAA,IACnC;AAAA,EACF,CAAC;AAAA,EACD,oBAAoB,yBAAyB;AAAA,IAC3C,QAAQ,CAAC,iBAAiB;AAAA,MACxB,aAAa,YAAY;AAAA,MACzB,YAAY,YAAY,aACpB,OAAO,YAAY,UAAsB,IACzC;AAAA,MACJ,qBAAqB,YAAY;AAAA,IACnC;AAAA,EACF,CAAC;AAAA,EACD,oBAAoB,yBAAyB;AAAA,IAC3C,QAAQ,CAAC,wBAAwB;AAAA,MAC/B,aAAa,mBAAmB;AAAA,MAChC,YAAY,mBAAmB;AAAA,MAC/B,qBAAqB,mBAAmB;AAAA,IAG1C;AAAA,EACF,CAAC;AACH;AAEO,IAAMA,YAAW,YAAmB,eAAQ;AAC5C,IAAMC,kBAAiB,YAAmB,qBAAc;AACxD,IAAMC,UAAS,YAAmB,aAAM;AACxC,IAAM,eAAe,YAAmB,oBAAa;AACrD,IAAMC,aAAY,YAAmB,gBAAS;AAC9C,IAAMC,iBAAgB,YAAmB,oBAAa;AACtD,IAAMC,UAAS,YAAmB,aAAM;AACxC,IAAMC,iBAAgB,YAAmB,oBAAa;AACtD,IAAMC,OAAM,YAAmB,UAAG;AAClC,IAAMC,cAAa,YAAmB,iBAAU;AAChD,IAAMC,SAAQ,YAAmB,YAAK;AACtC,IAAMC,QAAO,YAAY;AAAA,EAC9B,GAAU;AAAA,EACV,YAAY;AACd,CAAC;AACM,IAAMC,iBAAgB,YAAY;AAAA,EACvC,GAAU;AAAA,EACV,YAAY;AACd,CAAC;AACM,IAAMC,aAAY,YAAmB,gBAAS;AAC9C,IAAMC,SAAQ,YAAmB,YAAK;AACtC,IAAMC,gBAAe,YAAmB,mBAAY;AACpD,IAAMC,UAAS,YAAmB,aAAM;AACxC,IAAMC,iBAAgB,YAAmB,oBAAa;AACtD,IAAMC,YAAW,YAAmB,eAAQ;AAC5C,IAAM,kBAAkB,YAAmB,yBAAkB;AAC7D,IAAMC,WAAU,YAAmB,cAAO;AAC1C,IAAMC,UAAS,YAAmB,aAAM;AACxC,IAAMC,UAAS,YAAmB,aAAM;AACxC,IAAMC,gBAAe,YAAmB,mBAAY;AACpD,IAAMC,WAAU,YAAmB,cAAO;AAC1C,IAAMC,SAAQ,YAAmB,YAAK;AACtC,IAAMC,gBAAe,YAAmB,mBAAY;AACpD,IAAMC,aAAY,YAAmB,gBAAS;AAC9C,IAAMC,WAAU,YAAmB,cAAO;AAC1C,IAAMC,SAAQ,YAAmB,YAAK;AACtC,IAAMC,eAAc,YAAmB,kBAAW;AAClD,IAAMC,YAAW,YAAmB,eAAQ;AAC5C,IAAMC,kBAAiB,YAAmB,qBAAc;AACxD,IAAMC,WAAU,YAAmB,cAAO;AAC1C,IAAMC,iBAAgB,YAAmB,oBAAa;AACtD,IAAMC,WAAU,YAAmB,cAAO;AAC1C,IAAMC,UAAS,YAAmB,aAAM;AACxC,IAAMC,iBAAgB,YAAmB,oBAAa;AACtD,IAAMC,UAAS,YAAmB,aAAM;AACxC,IAAMC,iBAAgB,YAAmB,oBAAa","sourcesContent":["import * as chains from '@wagmi/chains'\n\nimport type { Address, Hex, Quantity } from './types'\nimport {\n  defineBlock,\n  defineChain,\n  defineTransaction,\n  defineTransactionReceipt,\n  defineTransactionRequest,\n} from './utils'\n\nexport type { Chain } from './types'\nexport { defineChain } from './utils'\n\nconst celoFormatters = {\n  block: defineBlock({\n    exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n    format: (block) => ({\n      randomness: block.randomness as {\n        committed: Hex\n        revealed: Hex\n      },\n    }),\n  }),\n  transaction: defineTransaction({\n    format: (transaction) => ({\n      feeCurrency: transaction.feeCurrency as Address | null,\n      gatewayFee: transaction.gatewayFee\n        ? BigInt(transaction.gatewayFee as Quantity)\n        : null,\n      gatewayFeeRecipient: transaction.gatewayFeeRecipient as Address | null,\n    }),\n  }),\n  transactionReceipt: defineTransactionReceipt({\n    format: (transaction) => ({\n      feeCurrency: transaction.feeCurrency as Address | null,\n      gatewayFee: transaction.gatewayFee\n        ? BigInt(transaction.gatewayFee as Quantity)\n        : null,\n      gatewayFeeRecipient: transaction.gatewayFeeRecipient as Address | null,\n    }),\n  }),\n  transactionRequest: defineTransactionRequest({\n    format: (transactionRequest) => ({\n      feeCurrency: transactionRequest.feeCurrency as Address | undefined,\n      gatewayFee: transactionRequest.gatewayFee as Quantity | undefined,\n      gatewayFeeRecipient: transactionRequest.gatewayFeeRecipient as\n        | Address\n        | undefined,\n    }),\n  }),\n}\n\nexport const arbitrum = defineChain(chains.arbitrum)\nexport const arbitrumGoerli = defineChain(chains.arbitrumGoerli)\nexport const aurora = defineChain(chains.aurora)\nexport const auroraGoerli = defineChain(chains.auroraTestnet)\nexport const avalanche = defineChain(chains.avalanche)\nexport const avalancheFuji = defineChain(chains.avalancheFuji)\nexport const bronos = defineChain(chains.bronos)\nexport const bronosTestnet = defineChain(chains.bronosTestnet)\nexport const bsc = defineChain(chains.bsc)\nexport const bscTestnet = defineChain(chains.bscTestnet)\nexport const canto = defineChain(chains.canto)\nexport const celo = defineChain({\n  ...chains.celo,\n  formatters: celoFormatters,\n})\nexport const celoAlfajores = defineChain({\n  ...chains.celoAlfajores,\n  formatters: celoFormatters,\n})\nexport const crossbell = defineChain(chains.crossbell)\nexport const evmos = defineChain(chains.evmos)\nexport const evmosTestnet = defineChain(chains.evmosTestnet)\nexport const fantom = defineChain(chains.fantom)\nexport const fantomTestnet = defineChain(chains.fantomTestnet)\nexport const filecoin = defineChain(chains.filecoin)\nexport const filecoinTestnet = defineChain(chains.filecoinHyperspace)\nexport const foundry = defineChain(chains.foundry)\nexport const goerli = defineChain(chains.goerli)\nexport const gnosis = defineChain(chains.gnosis)\nexport const gnosisChiado = defineChain(chains.gnosisChiado)\nexport const hardhat = defineChain(chains.hardhat)\nexport const iotex = defineChain(chains.iotex)\nexport const iotexTestnet = defineChain(chains.iotexTestnet)\nexport const localhost = defineChain(chains.localhost)\nexport const mainnet = defineChain(chains.mainnet)\nexport const metis = defineChain(chains.metis)\nexport const metisGoerli = defineChain(chains.metisGoerli)\nexport const optimism = defineChain(chains.optimism)\nexport const optimismGoerli = defineChain(chains.optimismGoerli)\nexport const polygon = defineChain(chains.polygon)\nexport const polygonMumbai = defineChain(chains.polygonMumbai)\nexport const sepolia = defineChain(chains.sepolia)\nexport const taraxa = defineChain(chains.taraxa)\nexport const taraxaTestnet = defineChain(chains.taraxaTestnet)\nexport const zkSync = defineChain(chains.zkSync)\nexport const zkSyncTestnet = defineChain(chains.zkSyncTestnet)\n"]}