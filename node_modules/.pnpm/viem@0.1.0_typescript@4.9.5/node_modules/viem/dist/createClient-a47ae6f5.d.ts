import { C as Chain } from './chain-819c7ff7.js';
import { R as Requests } from './eip1193-a882d1b8.js';

type BaseRpcRequests = {
    request(...args: any): Promise<any>;
};
type TransportConfig<TType extends string = string, TRequests extends BaseRpcRequests['request'] = Requests['request']> = {
    /** The name of the transport. */
    name: string;
    /** The key of the transport. */
    key: string;
    /** The JSON-RPC request function that matches the EIP-1193 request spec. */
    request: TRequests;
    /** The base delay (in ms) between retries. */
    retryDelay?: number;
    /** The max number of times to retry. */
    retryCount?: number;
    /** The timeout (in ms) for requests. */
    timeout?: number;
    /** The type of the transport. */
    type: TType;
};
type Transport<TType extends string = string, TRpcAttributes = Record<string, any>, TRequests extends BaseRpcRequests['request'] = Requests['request']> = <TChain extends Chain = Chain>({ chain, }: {
    chain?: TChain;
    retryCount?: TransportConfig['retryCount'];
}) => {
    config: TransportConfig<TType>;
    request: TRequests;
    value?: TRpcAttributes;
};
/**
 * @description Creates an transport intended to be used with a client.
 */
declare function createTransport<TType extends string = string, TRpcAttributes = any>({ key, name, request, retryCount, retryDelay, timeout, type, }: TransportConfig<TType>, value?: TRpcAttributes): ReturnType<Transport<TType, TRpcAttributes>>;

type Client<TTransport extends Transport = Transport, TChain extends Chain = Chain, TRequests extends BaseRpcRequests = Requests> = {
    /** Chain for the client. */
    chain?: TChain;
    /** A key for the client. */
    key: string;
    /** A name for the client. */
    name: string;
    /** Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. */
    pollingInterval: number;
    /** Request function wrapped with friendly error handling */
    request: TRequests['request'];
    /** The RPC transport (http, webSocket, custom, etc) */
    transport: ReturnType<TTransport>['config'] & ReturnType<TTransport>['value'];
    /** The type of client. */
    type: string;
    /** A unique ID for the client. */
    uid: string;
};
type ClientConfig<TTransport extends Transport = Transport, TChain extends Chain = Chain, TRequests extends BaseRpcRequests = Requests> = Partial<Pick<Client<TTransport, TChain, TRequests>, 'chain' | 'key' | 'name' | 'pollingInterval' | 'type'>> & {
    transport: TTransport;
};
/**
 * @description Creates a base client with the given transport.
 */
declare function createClient<TTransport extends Transport, TChain extends Chain, TRequests extends BaseRpcRequests>({ chain, key, name, pollingInterval, transport, type, }: ClientConfig<TTransport, TChain, TRequests>): Client<TTransport, TChain, TRequests>;

export { BaseRpcRequests as B, Client as C, TransportConfig as T, Transport as a, ClientConfig as b, createClient as c, createTransport as d };
