"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }




var _chunkHCZO3OIXjs = require('./chunk-HCZO3OIX.js');






































































































































































































































var _chunkQJNPIGP5js = require('./chunk-QJNPIGP5.js');

// src/clients/transports/createTransport.ts
function createTransport({
  key,
  name,
  request,
  retryCount = 3,
  retryDelay = 150,
  timeout,
  type
}, value) {
  return {
    config: { key, name, request, retryCount, retryDelay, timeout, type },
    request: _chunkQJNPIGP5js.buildRequest.call(void 0, request, { retryCount, retryDelay }),
    value
  };
}

// src/clients/transports/custom.ts
function custom(provider, config = {}) {
  const { key = "custom", name = "Custom Provider", retryDelay } = config;
  return ({ retryCount: defaultRetryCount }) => createTransport({
    key,
    name,
    request: provider.request.bind(provider),
    retryCount: _nullishCoalesce(config.retryCount, () => ( defaultRetryCount)),
    retryDelay,
    type: "custom"
  });
}

// src/clients/transports/fallback.ts
function fallback(transports, config = {}) {
  const { key = "fallback", name = "Fallback", retryCount, retryDelay } = config;
  return ({ chain }) => createTransport(
    {
      key,
      name,
      async request({ method, params }) {
        const fetch = async (i = 0) => {
          const transport = transports[i]({ chain, retryCount: 0 });
          try {
            return await transport.request({
              method,
              params
            });
          } catch (err) {
            if (_chunkQJNPIGP5js.isDeterministicError.call(void 0, err))
              throw err;
            if (i === transports.length - 1)
              throw err;
            return fetch(i + 1);
          }
        };
        return fetch();
      },
      retryCount,
      retryDelay,
      type: "fallback"
    },
    {
      transports: transports.map(
        (fn) => fn({ chain, retryCount: 0 })
      )
    }
  );
}

// src/clients/transports/http.ts
function http(url, config = {}) {
  const {
    fetchOptions,
    key = "http",
    name = "HTTP JSON-RPC",
    retryDelay,
    timeout = 1e4
  } = config;
  return ({ chain, retryCount: defaultRetryCount }) => {
    const retryCount = _nullishCoalesce(config.retryCount, () => ( defaultRetryCount));
    const url_ = url || _optionalChain([chain, 'optionalAccess', _ => _.rpcUrls, 'access', _2 => _2.default, 'access', _3 => _3.http, 'access', _4 => _4[0]]);
    if (!url_)
      throw new (0, _chunkQJNPIGP5js.UrlRequiredError)();
    return createTransport(
      {
        key,
        name,
        async request({ method, params }) {
          const { result } = await _chunkQJNPIGP5js.rpc.http(url_, {
            body: {
              method,
              params
            },
            fetchOptions,
            timeout
          });
          return result;
        },
        retryCount,
        retryDelay,
        timeout,
        type: "http"
      },
      {
        url
      }
    );
  };
}

// src/clients/transports/webSocket.ts
function webSocket(url, config = {}) {
  const {
    key = "webSocket",
    name = "WebSocket JSON-RPC",
    retryDelay,
    timeout = 1e4
  } = config;
  return ({ chain, retryCount: defaultRetryCount }) => {
    const retryCount = _nullishCoalesce(config.retryCount, () => ( defaultRetryCount));
    const url_ = url || _optionalChain([chain, 'optionalAccess', _5 => _5.rpcUrls, 'access', _6 => _6.default, 'access', _7 => _7.webSocket, 'optionalAccess', _8 => _8[0]]);
    if (!url_)
      throw new (0, _chunkQJNPIGP5js.UrlRequiredError)();
    return createTransport(
      {
        key,
        name,
        async request({ method, params }) {
          const socket = await _chunkQJNPIGP5js.getSocket.call(void 0, url_);
          const { result } = await _chunkQJNPIGP5js.rpc.webSocketAsync(socket, {
            body: { method, params },
            timeout
          });
          return result;
        },
        retryCount,
        retryDelay,
        timeout,
        type: "webSocket"
      },
      {
        getSocket() {
          return _chunkQJNPIGP5js.getSocket.call(void 0, url_);
        },
        async subscribe({ params, onData, onError }) {
          const socket = await _chunkQJNPIGP5js.getSocket.call(void 0, url_);
          const { result: subscriptionId } = await new Promise(
            (resolve, reject) => _chunkQJNPIGP5js.rpc.webSocket(socket, {
              body: {
                method: "eth_subscribe",
                params
              },
              onData: (data) => {
                if (typeof data.id === "number") {
                  resolve(data);
                  return;
                }
                onData(data);
              },
              onError: (error) => {
                reject(error);
                _optionalChain([onError, 'optionalCall', _9 => _9(error)]);
              }
            })
          );
          return {
            subscriptionId,
            async unsubscribe() {
              return new Promise(
                (resolve, reject) => _chunkQJNPIGP5js.rpc.webSocket(socket, {
                  body: {
                    method: "eth_unsubscribe",
                    params: [subscriptionId]
                  },
                  onData: resolve,
                  onError: reject
                })
              );
            }
          };
        }
      }
    );
  };
}

// src/utils/uid.ts
var size2 = 256;
var index = size2;
var buffer;
function uid(length = 11) {
  if (!buffer || index + length > size2 * 2) {
    buffer = "";
    index = 0;
    for (let i = 0; i < size2; i++) {
      buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
    }
  }
  return buffer.substring(index, index++ + length);
}

// src/clients/createClient.ts
function createClient({
  chain,
  key = "base",
  name = "Base Client",
  pollingInterval = 4e3,
  transport,
  type = "base"
}) {
  const { config, request, value } = transport({ chain });
  return {
    chain,
    key,
    name,
    pollingInterval,
    request,
    transport: { ...config, ...value },
    type,
    uid: uid()
  };
}

// src/clients/decorators/public.ts
var publicActions = (client) => ({
  call: (args) => _chunkQJNPIGP5js.call.call(void 0, client, args),
  createBlockFilter: () => _chunkQJNPIGP5js.createBlockFilter.call(void 0, client),
  createContractEventFilter: (args) => _chunkQJNPIGP5js.createContractEventFilter.call(void 0, client, args),
  createEventFilter: (args) => _chunkQJNPIGP5js.createEventFilter.call(void 0, client, args),
  createPendingTransactionFilter: () => _chunkQJNPIGP5js.createPendingTransactionFilter.call(void 0, client),
  estimateContractGas: (args) => _chunkQJNPIGP5js.estimateContractGas.call(void 0, client, args),
  estimateGas: (args) => _chunkQJNPIGP5js.estimateGas.call(void 0, client, args),
  getBalance: (args) => _chunkQJNPIGP5js.getBalance.call(void 0, client, args),
  getBlock: (args) => _chunkQJNPIGP5js.getBlock.call(void 0, client, args),
  getBlockNumber: (args) => _chunkQJNPIGP5js.getBlockNumber.call(void 0, client, args),
  getBlockTransactionCount: (args) => _chunkQJNPIGP5js.getBlockTransactionCount.call(void 0, client, args),
  getBytecode: (args) => _chunkQJNPIGP5js.getBytecode.call(void 0, client, args),
  getChainId: () => _chunkQJNPIGP5js.getChainId.call(void 0, client),
  getEnsAddress: (args) => _chunkHCZO3OIXjs.getEnsAddress.call(void 0, client, args),
  getEnsName: (args) => _chunkHCZO3OIXjs.getEnsName.call(void 0, client, args),
  getFeeHistory: (args) => _chunkQJNPIGP5js.getFeeHistory.call(void 0, client, args),
  getFilterChanges: (args) => _chunkQJNPIGP5js.getFilterChanges.call(void 0, client, args),
  getFilterLogs: (args) => _chunkQJNPIGP5js.getFilterLogs.call(void 0, client, args),
  getGasPrice: () => _chunkQJNPIGP5js.getGasPrice.call(void 0, client),
  getLogs: (args) => _chunkQJNPIGP5js.getLogs.call(void 0, client, args),
  getStorageAt: (args) => _chunkQJNPIGP5js.getStorageAt.call(void 0, client, args),
  getTransaction: (args) => _chunkQJNPIGP5js.getTransaction.call(void 0, client, args),
  getTransactionConfirmations: (args) => _chunkQJNPIGP5js.getTransactionConfirmations.call(void 0, client, args),
  getTransactionReceipt: (args) => _chunkQJNPIGP5js.getTransactionReceipt.call(void 0, client, args),
  multicall: (args) => _chunkQJNPIGP5js.multicall.call(void 0, client, args),
  readContract: (args) => _chunkQJNPIGP5js.readContract.call(void 0, client, args),
  simulateContract: (args) => _chunkQJNPIGP5js.simulateContract.call(void 0, client, args),
  uninstallFilter: (args) => _chunkQJNPIGP5js.uninstallFilter.call(void 0, client, args),
  waitForTransactionReceipt: (args) => _chunkQJNPIGP5js.waitForTransactionReceipt.call(void 0, client, args),
  watchBlocks: (args) => _chunkQJNPIGP5js.watchBlocks.call(void 0, client, args),
  watchBlockNumber: (args) => _chunkQJNPIGP5js.watchBlockNumber.call(void 0, client, args),
  watchContractEvent: (args) => _chunkQJNPIGP5js.watchContractEvent.call(void 0, client, args),
  watchEvent: (args) => _chunkQJNPIGP5js.watchEvent.call(void 0, client, args),
  watchPendingTransactions: (args) => _chunkQJNPIGP5js.watchPendingTransactions.call(void 0, client, args)
});

// src/clients/decorators/test.ts
var testActions = (client) => ({
  dropTransaction: (args) => _chunkQJNPIGP5js.dropTransaction.call(void 0, client, args),
  getAutomine: () => _chunkQJNPIGP5js.getAutomine.call(void 0, client),
  getTxpoolContent: () => _chunkQJNPIGP5js.getTxpoolContent.call(void 0, client),
  getTxpoolStatus: () => _chunkQJNPIGP5js.getTxpoolStatus.call(void 0, client),
  impersonateAccount: (args) => _chunkQJNPIGP5js.impersonateAccount.call(void 0, client, args),
  increaseTime: (args) => _chunkQJNPIGP5js.increaseTime.call(void 0, client, args),
  inspectTxpool: () => _chunkQJNPIGP5js.inspectTxpool.call(void 0, client),
  mine: (args) => _chunkQJNPIGP5js.mine.call(void 0, client, args),
  removeBlockTimestampInterval: () => _chunkQJNPIGP5js.removeBlockTimestampInterval.call(void 0, client),
  reset: (args) => _chunkQJNPIGP5js.reset.call(void 0, client, args),
  revert: (args) => _chunkQJNPIGP5js.revert.call(void 0, client, args),
  sendUnsignedTransaction: (args) => _chunkQJNPIGP5js.sendUnsignedTransaction.call(void 0, client, args),
  setAutomine: (args) => _chunkQJNPIGP5js.setAutomine.call(void 0, client, args),
  setBalance: (args) => _chunkQJNPIGP5js.setBalance.call(void 0, client, args),
  setBlockGasLimit: (args) => _chunkQJNPIGP5js.setBlockGasLimit.call(void 0, client, args),
  setBlockTimestampInterval: (args) => _chunkQJNPIGP5js.setBlockTimestampInterval.call(void 0, client, args),
  setCode: (args) => _chunkQJNPIGP5js.setCode.call(void 0, client, args),
  setCoinbase: (args) => _chunkQJNPIGP5js.setCoinbase.call(void 0, client, args),
  setIntervalMining: (args) => _chunkQJNPIGP5js.setIntervalMining.call(void 0, client, args),
  setLoggingEnabled: (args) => _chunkQJNPIGP5js.setLoggingEnabled.call(void 0, client, args),
  setMinGasPrice: (args) => _chunkQJNPIGP5js.setMinGasPrice.call(void 0, client, args),
  setNextBlockBaseFeePerGas: (args) => _chunkQJNPIGP5js.setNextBlockBaseFeePerGas.call(void 0, client, args),
  setNextBlockTimestamp: (args) => _chunkQJNPIGP5js.setNextBlockTimestamp.call(void 0, client, args),
  setNonce: (args) => _chunkQJNPIGP5js.setNonce.call(void 0, client, args),
  setRpcUrl: (args) => _chunkQJNPIGP5js.setRpcUrl.call(void 0, client, args),
  setStorageAt: (args) => _chunkQJNPIGP5js.setStorageAt.call(void 0, client, args),
  snapshot: () => _chunkQJNPIGP5js.snapshot.call(void 0, client),
  stopImpersonatingAccount: (args) => _chunkQJNPIGP5js.stopImpersonatingAccount.call(void 0, client, args)
});

// src/clients/decorators/wallet.ts
var walletActions = (client) => ({
  addChain: (args) => _chunkQJNPIGP5js.addChain.call(void 0, client, args),
  deployContract: (args) => _chunkQJNPIGP5js.deployContract.call(void 0, client, args),
  getAddresses: () => _chunkQJNPIGP5js.getAddresses.call(void 0, client),
  getChainId: () => _chunkQJNPIGP5js.getChainId.call(void 0, client),
  getPermissions: () => _chunkQJNPIGP5js.getPermissions.call(void 0, client),
  requestAddresses: () => _chunkQJNPIGP5js.requestAddresses.call(void 0, client),
  requestPermissions: (args) => _chunkQJNPIGP5js.requestPermissions.call(void 0, client, args),
  sendTransaction: (args) => _chunkQJNPIGP5js.sendTransaction.call(void 0, client, args),
  signMessage: (args) => _chunkQJNPIGP5js.signMessage.call(void 0, client, args),
  switchChain: (args) => _chunkQJNPIGP5js.switchChain.call(void 0, client, args),
  watchAsset: (args) => _chunkQJNPIGP5js.watchAsset.call(void 0, client, args),
  writeContract: (args) => _chunkQJNPIGP5js.writeContract.call(void 0, client, args)
});

// src/clients/createPublicClient.ts
function createPublicClient({
  chain,
  key = "public",
  name = "Public Client",
  transport,
  pollingInterval
}) {
  const client = createClient({
    chain,
    key,
    name,
    pollingInterval,
    transport,
    type: "publicClient"
  });
  return {
    ...client,
    ...publicActions(client)
  };
}

// src/clients/createTestClient.ts
function createTestClient({
  chain,
  key = "test",
  name = "Test Client",
  mode,
  pollingInterval,
  transport
}) {
  const client = {
    ...createClient({
      chain,
      key,
      name,
      pollingInterval,
      transport,
      type: "testClient"
    }),
    mode
  };
  return {
    ...client,
    ...testActions(client)
  };
}

// src/clients/createWalletClient.ts
function createWalletClient({
  transport,
  key = "wallet",
  name = "Wallet Client",
  pollingInterval
}) {
  const client = createClient({
    key,
    name,
    pollingInterval,
    transport: () => transport({ retryCount: 0 }),
    type: "walletClient"
  });
  return {
    ...client,
    ...walletActions(client)
  };
}






































































































































































exports.AbiConstructorNotFoundError = _chunkQJNPIGP5js.AbiConstructorNotFoundError; exports.AbiConstructorParamsNotFoundError = _chunkQJNPIGP5js.AbiConstructorParamsNotFoundError; exports.AbiDecodingDataSizeInvalidError = _chunkQJNPIGP5js.AbiDecodingDataSizeInvalidError; exports.AbiDecodingZeroDataError = _chunkQJNPIGP5js.AbiDecodingZeroDataError; exports.AbiEncodingArrayLengthMismatchError = _chunkQJNPIGP5js.AbiEncodingArrayLengthMismatchError; exports.AbiEncodingLengthMismatchError = _chunkQJNPIGP5js.AbiEncodingLengthMismatchError; exports.AbiErrorInputsNotFoundError = _chunkQJNPIGP5js.AbiErrorInputsNotFoundError; exports.AbiErrorNotFoundError = _chunkQJNPIGP5js.AbiErrorNotFoundError; exports.AbiErrorSignatureNotFoundError = _chunkQJNPIGP5js.AbiErrorSignatureNotFoundError; exports.AbiEventNotFoundError = _chunkQJNPIGP5js.AbiEventNotFoundError; exports.AbiEventSignatureNotFoundError = _chunkQJNPIGP5js.AbiEventSignatureNotFoundError; exports.AbiFunctionNotFoundError = _chunkQJNPIGP5js.AbiFunctionNotFoundError; exports.AbiFunctionOutputsNotFoundError = _chunkQJNPIGP5js.AbiFunctionOutputsNotFoundError; exports.AbiFunctionSignatureNotFoundError = _chunkQJNPIGP5js.AbiFunctionSignatureNotFoundError; exports.BaseError = _chunkQJNPIGP5js.BaseError; exports.BlockNotFoundError = _chunkQJNPIGP5js.BlockNotFoundError; exports.CallExecutionError = _chunkQJNPIGP5js.CallExecutionError; exports.ChainDoesNotSupportContract = _chunkQJNPIGP5js.ChainDoesNotSupportContract; exports.ContractFunctionExecutionError = _chunkQJNPIGP5js.ContractFunctionExecutionError; exports.ContractFunctionRevertedError = _chunkQJNPIGP5js.ContractFunctionRevertedError; exports.ContractFunctionZeroDataError = _chunkQJNPIGP5js.ContractFunctionZeroDataError; exports.DataLengthTooLongError = _chunkQJNPIGP5js.DataLengthTooLongError; exports.DataLengthTooShortError = _chunkQJNPIGP5js.DataLengthTooShortError; exports.EstimateGasExecutionError = _chunkQJNPIGP5js.EstimateGasExecutionError; exports.ExecutionRevertedError = _chunkQJNPIGP5js.ExecutionRevertedError; exports.FeeCapTooHighError = _chunkQJNPIGP5js.FeeCapTooHighError; exports.FeeCapTooLowError = _chunkQJNPIGP5js.FeeCapTooLowError; exports.FilterTypeNotSupportedError = _chunkQJNPIGP5js.FilterTypeNotSupportedError; exports.HttpRequestError = _chunkQJNPIGP5js.HttpRequestError; exports.InsufficientFundsError = _chunkQJNPIGP5js.InsufficientFundsError; exports.InternalRpcError = _chunkQJNPIGP5js.InternalRpcError; exports.IntrinsicGasTooHighError = _chunkQJNPIGP5js.IntrinsicGasTooHighError; exports.IntrinsicGasTooLowError = _chunkQJNPIGP5js.IntrinsicGasTooLowError; exports.InvalidAbiDecodingTypeError = _chunkQJNPIGP5js.InvalidAbiDecodingTypeError; exports.InvalidAbiEncodingTypeError = _chunkQJNPIGP5js.InvalidAbiEncodingTypeError; exports.InvalidAddressError = _chunkQJNPIGP5js.InvalidAddressError; exports.InvalidArrayError = _chunkQJNPIGP5js.InvalidArrayError; exports.InvalidBytesBooleanError = _chunkQJNPIGP5js.InvalidBytesBooleanError; exports.InvalidDefinitionTypeError = _chunkQJNPIGP5js.InvalidDefinitionTypeError; exports.InvalidHexBooleanError = _chunkQJNPIGP5js.InvalidHexBooleanError; exports.InvalidHexValueError = _chunkQJNPIGP5js.InvalidHexValueError; exports.InvalidInputRpcError = _chunkQJNPIGP5js.InvalidInputRpcError; exports.InvalidParamsRpcError = _chunkQJNPIGP5js.InvalidParamsRpcError; exports.InvalidRequestRpcError = _chunkQJNPIGP5js.InvalidRequestRpcError; exports.JsonRpcVersionUnsupportedError = _chunkQJNPIGP5js.JsonRpcVersionUnsupportedError; exports.LimitExceededRpcError = _chunkQJNPIGP5js.LimitExceededRpcError; exports.MethodNotFoundRpcError = _chunkQJNPIGP5js.MethodNotFoundRpcError; exports.MethodNotSupportedRpcError = _chunkQJNPIGP5js.MethodNotSupportedRpcError; exports.NonceMaxValueError = _chunkQJNPIGP5js.NonceMaxValueError; exports.NonceTooHighError = _chunkQJNPIGP5js.NonceTooHighError; exports.NonceTooLowError = _chunkQJNPIGP5js.NonceTooLowError; exports.OffsetOutOfBoundsError = _chunkQJNPIGP5js.OffsetOutOfBoundsError; exports.ParseRpcError = _chunkQJNPIGP5js.ParseRpcError; exports.RawContractError = _chunkQJNPIGP5js.RawContractError; exports.RequestError = _chunkQJNPIGP5js.RequestError; exports.ResourceNotFoundRpcError = _chunkQJNPIGP5js.ResourceNotFoundRpcError; exports.ResourceUnavailableRpcError = _chunkQJNPIGP5js.ResourceUnavailableRpcError; exports.RpcError = _chunkQJNPIGP5js.RpcError; exports.RpcRequestError = _chunkQJNPIGP5js.RpcRequestError; exports.SizeExceedsPaddingSizeError = _chunkQJNPIGP5js.SizeExceedsPaddingSizeError; exports.SwitchChainError = _chunkQJNPIGP5js.SwitchChainError; exports.TimeoutError = _chunkQJNPIGP5js.TimeoutError; exports.TipAboveFeeCapError = _chunkQJNPIGP5js.TipAboveFeeCapError; exports.TransactionExecutionError = _chunkQJNPIGP5js.TransactionExecutionError; exports.TransactionNotFoundError = _chunkQJNPIGP5js.TransactionNotFoundError; exports.TransactionReceiptNotFoundError = _chunkQJNPIGP5js.TransactionReceiptNotFoundError; exports.TransactionRejectedRpcError = _chunkQJNPIGP5js.TransactionRejectedRpcError; exports.TransactionTypeNotSupportedError = _chunkQJNPIGP5js.TransactionTypeNotSupportedError; exports.UnknownNodeError = _chunkQJNPIGP5js.UnknownNodeError; exports.UnknownRpcError = _chunkQJNPIGP5js.UnknownRpcError; exports.UrlRequiredError = _chunkQJNPIGP5js.UrlRequiredError; exports.UserRejectedRequestError = _chunkQJNPIGP5js.UserRejectedRequestError; exports.WaitForTransactionReceiptTimeoutError = _chunkQJNPIGP5js.WaitForTransactionReceiptTimeoutError; exports.WebSocketRequestError = _chunkQJNPIGP5js.WebSocketRequestError; exports.boolToBytes = _chunkQJNPIGP5js.boolToBytes; exports.boolToHex = _chunkQJNPIGP5js.boolToHex; exports.bytesToBigint = _chunkQJNPIGP5js.bytesToBigint; exports.bytesToBool = _chunkQJNPIGP5js.bytesToBool; exports.bytesToHex = _chunkQJNPIGP5js.bytesToHex; exports.bytesToNumber = _chunkQJNPIGP5js.bytesToNumber; exports.bytesToString = _chunkQJNPIGP5js.bytesToString; exports.createClient = createClient; exports.createPublicClient = createPublicClient; exports.createTestClient = createTestClient; exports.createTransport = createTransport; exports.createWalletClient = createWalletClient; exports.custom = custom; exports.decodeAbiParameters = _chunkQJNPIGP5js.decodeAbiParameters; exports.decodeErrorResult = _chunkQJNPIGP5js.decodeErrorResult; exports.decodeEventLog = _chunkQJNPIGP5js.decodeEventLog; exports.decodeFunctionData = _chunkQJNPIGP5js.decodeFunctionData; exports.decodeFunctionResult = _chunkQJNPIGP5js.decodeFunctionResult; exports.defineBlock = _chunkQJNPIGP5js.defineBlock; exports.defineChain = _chunkQJNPIGP5js.defineChain; exports.defineTransaction = _chunkQJNPIGP5js.defineTransaction; exports.defineTransactionReceipt = _chunkQJNPIGP5js.defineTransactionReceipt; exports.defineTransactionRequest = _chunkQJNPIGP5js.defineTransactionRequest; exports.encodeAbiParameters = _chunkQJNPIGP5js.encodeAbiParameters; exports.encodeDeployData = _chunkQJNPIGP5js.encodeDeployData; exports.encodeErrorResult = _chunkQJNPIGP5js.encodeErrorResult; exports.encodeEventTopics = _chunkQJNPIGP5js.encodeEventTopics; exports.encodeFunctionData = _chunkQJNPIGP5js.encodeFunctionData; exports.encodeFunctionResult = _chunkQJNPIGP5js.encodeFunctionResult; exports.encodePacked = _chunkQJNPIGP5js.encodePacked; exports.etherUnits = _chunkQJNPIGP5js.etherUnits; exports.fallback = fallback; exports.formatBlock = _chunkQJNPIGP5js.formatBlock; exports.formatEther = _chunkQJNPIGP5js.formatEther; exports.formatGwei = _chunkQJNPIGP5js.formatGwei; exports.formatTransaction = _chunkQJNPIGP5js.formatTransaction; exports.formatTransactionRequest = _chunkQJNPIGP5js.formatTransactionRequest; exports.formatUnits = _chunkQJNPIGP5js.formatUnits; exports.fromBytes = _chunkQJNPIGP5js.fromBytes; exports.fromHex = _chunkQJNPIGP5js.fromHex; exports.fromRlp = _chunkQJNPIGP5js.fromRlp; exports.getAbiItem = _chunkQJNPIGP5js.getAbiItem; exports.getAccount = _chunkQJNPIGP5js.getAccount; exports.getAddress = _chunkQJNPIGP5js.getAddress; exports.getContractAddress = _chunkQJNPIGP5js.getContractAddress; exports.getContractError = _chunkQJNPIGP5js.getContractError; exports.getCreate2Address = _chunkQJNPIGP5js.getCreate2Address; exports.getCreateAddress = _chunkQJNPIGP5js.getCreateAddress; exports.getEventSelector = _chunkQJNPIGP5js.getEventSelector; exports.getFunctionSelector = _chunkQJNPIGP5js.getFunctionSelector; exports.gweiUnits = _chunkQJNPIGP5js.gweiUnits; exports.hexToBigInt = _chunkQJNPIGP5js.hexToBigInt; exports.hexToBool = _chunkQJNPIGP5js.hexToBool; exports.hexToBytes = _chunkQJNPIGP5js.hexToBytes; exports.hexToNumber = _chunkQJNPIGP5js.hexToNumber; exports.hexToString = _chunkQJNPIGP5js.hexToString; exports.http = http; exports.isAddress = _chunkQJNPIGP5js.isAddress; exports.isAddressEqual = _chunkQJNPIGP5js.isAddressEqual; exports.isBytes = _chunkQJNPIGP5js.isBytes; exports.isHex = _chunkQJNPIGP5js.isHex; exports.keccak256 = _chunkQJNPIGP5js.keccak256; exports.labelhash = _chunkHCZO3OIXjs.labelhash; exports.multicall3Abi = _chunkQJNPIGP5js.multicall3Abi; exports.namehash = _chunkHCZO3OIXjs.namehash; exports.numberToBytes = _chunkQJNPIGP5js.numberToBytes; exports.numberToHex = _chunkQJNPIGP5js.numberToHex; exports.pad = _chunkQJNPIGP5js.pad; exports.padBytes = _chunkQJNPIGP5js.padBytes; exports.padHex = _chunkQJNPIGP5js.padHex; exports.parseAbi = _chunkQJNPIGP5js.parseAbi; exports.parseAbiItem = _chunkQJNPIGP5js.parseAbiItem; exports.parseAbiParameter = _chunkQJNPIGP5js.parseAbiParameter; exports.parseAbiParameters = _chunkQJNPIGP5js.parseAbiParameters; exports.parseEther = _chunkQJNPIGP5js.parseEther; exports.parseGwei = _chunkQJNPIGP5js.parseGwei; exports.parseUnits = _chunkQJNPIGP5js.parseUnits; exports.size = _chunkQJNPIGP5js.size; exports.slice = _chunkQJNPIGP5js.slice; exports.sliceBytes = _chunkQJNPIGP5js.sliceBytes; exports.sliceHex = _chunkQJNPIGP5js.sliceHex; exports.stringToBytes = _chunkQJNPIGP5js.stringToBytes; exports.stringToHex = _chunkQJNPIGP5js.stringToHex; exports.stringify = _chunkQJNPIGP5js.stringify; exports.toBytes = _chunkQJNPIGP5js.toBytes; exports.toHex = _chunkQJNPIGP5js.toHex; exports.toRlp = _chunkQJNPIGP5js.toRlp; exports.transactionType = _chunkQJNPIGP5js.transactionType; exports.trim = _chunkQJNPIGP5js.trim; exports.webSocket = webSocket; exports.weiUnits = _chunkQJNPIGP5js.weiUnits;
//# sourceMappingURL=index.js.map