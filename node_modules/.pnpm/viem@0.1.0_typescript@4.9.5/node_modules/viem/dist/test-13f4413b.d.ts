import { a as Hash, p as RpcTransaction, a3 as Quantity, t as TransactionRequest, H as Hex, C as Chain } from './chain-819c7ff7.js';
import { T as TestRequests } from './eip1193-a882d1b8.js';
import { a as Transport, b as ClientConfig, C as Client } from './createClient-a47ae6f5.js';
import { Address } from 'abitype';

type DropTransactionParameters = {
    /** The hash of the transaction to drop. */
    hash: Hash;
};
declare function dropTransaction(client: TestClient, { hash }: DropTransactionParameters): Promise<void>;

type GetAutomineReturnType = boolean;
declare function getAutomine(client: TestClient): Promise<GetAutomineReturnType>;

type GetTxpoolContentReturnType = {
    pending: Record<Address, Record<string, RpcTransaction>>;
    queued: Record<Address, Record<string, RpcTransaction>>;
};
declare function getTxpoolContent(client: TestClient): Promise<GetTxpoolContentReturnType>;

type GetTxpoolStatusReturnType = {
    pending: number;
    queued: number;
};
declare function getTxpoolStatus(client: TestClient): Promise<GetTxpoolStatusReturnType>;

type ImpersonateAccountParameters = {
    /** The account to impersonate. */
    address: Address;
};
declare function impersonateAccount(client: TestClient, { address }: ImpersonateAccountParameters): Promise<void>;

type IncreaseTimeParameters = {
    /** The amount of seconds to jump forward in time. */
    seconds: number;
};
declare function increaseTime(client: TestClient, { seconds }: IncreaseTimeParameters): Promise<`0x${string}`>;

type InspectTxpoolReturnType = {
    pending: Record<Address, Record<string, string>>;
    queued: Record<Address, Record<string, string>>;
};
declare function inspectTxpool(client: TestClient): Promise<InspectTxpoolReturnType>;

type MineParameters = {
    /** Number of blocks to mine. */
    blocks: number;
    /** Interval between each block in seconds. */
    interval?: number;
};
declare function mine(client: TestClient, { blocks, interval }: MineParameters): Promise<void>;

type ResetParameters = {
    /** The block number to reset from. */
    blockNumber?: bigint;
    /** The JSON RPC URL. */
    jsonRpcUrl?: string;
};
declare function reset(client: TestClient, { blockNumber, jsonRpcUrl }?: ResetParameters): Promise<void>;

type RevertParameters = {
    /** The snapshot ID to revert to. */
    id: Quantity;
};
declare function revert(client: TestClient, { id }: RevertParameters): Promise<void>;

type SendUnsignedTransactionParameters = TransactionRequest;
type SendUnsignedTransactionReturnType = Hash;
declare function sendUnsignedTransaction(client: TestClient, request: SendUnsignedTransactionParameters): Promise<SendUnsignedTransactionReturnType>;

type SetBalanceParameters = {
    /** The account address. */
    address: Address;
    /** Amount (in wei) to set */
    value: bigint;
};
declare function setBalance(client: TestClient, { address, value }: SetBalanceParameters): Promise<void>;

type SetBlockGasLimitParameters = {
    /** Gas limit (in wei). */
    gasLimit: bigint;
};
declare function setBlockGasLimit(client: TestClient, { gasLimit }: SetBlockGasLimitParameters): Promise<void>;

type SetBlockTimestampIntervalParameters = {
    /** The interval (in seconds). */
    interval: number;
};
declare function setBlockTimestampInterval(client: TestClient, { interval }: SetBlockTimestampIntervalParameters): Promise<void>;

type SetCodeParameters = {
    /** The account address. */
    address: Address;
    /** The bytecode to set */
    bytecode: Hex;
};
declare function setCode(client: TestClient, { address, bytecode }: SetCodeParameters): Promise<void>;

type SetCoinbaseParameters = {
    /** The coinbase address. */
    address: Address;
};
declare function setCoinbase(client: TestClient, { address }: SetCoinbaseParameters): Promise<void>;

type SetIntervalMiningParameters = {
    /** The mining interval. */
    interval: number;
};
declare function setIntervalMining(client: TestClient, { interval }: SetIntervalMiningParameters): Promise<void>;

type SetMinGasPriceParameters = {
    /** The gas price. */
    gasPrice: bigint;
};
declare function setMinGasPrice(client: TestClient, { gasPrice }: SetMinGasPriceParameters): Promise<void>;

type SetNextBlockBaseFeePerGasParameters = {
    /** Base fee per gas (in wei). */
    baseFeePerGas: bigint;
};
declare function setNextBlockBaseFeePerGas(client: TestClient, { baseFeePerGas }: SetNextBlockBaseFeePerGasParameters): Promise<void>;

type SetNextBlockTimestampParameters = {
    /** The timestamp (in seconds). */
    timestamp: bigint;
};
declare function setNextBlockTimestamp(client: TestClient, { timestamp }: SetNextBlockTimestampParameters): Promise<void>;

type SetNonceParameters = {
    /** The account address. */
    address: Address;
    /** The nonce to set. */
    nonce: number;
};
declare function setNonce(client: TestClient, { address, nonce }: SetNonceParameters): Promise<void>;

type SetStorageAtParameters = {
    /** The account address. */
    address: Address;
    /** The storage slot (index). Can either be a number or hash value. */
    index: number | Hash;
    /** The value to store as a 32 byte hex string. */
    value: Hex;
};
declare function setStorageAt(client: TestClient, { address, index, value }: SetStorageAtParameters): Promise<void>;

type StopImpersonatingAccountParameters = {
    /** The account to impersonate. */
    address: Address;
};
declare function stopImpersonatingAccount(client: TestClient, { address }: StopImpersonatingAccountParameters): Promise<void>;

type TestClientModes = 'anvil' | 'hardhat';
type TestClientConfig<TTransport extends Transport = Transport, TChain extends Chain = Chain, TMode extends TestClientModes = TestClientModes> = {
    chain?: ClientConfig<TTransport, TChain>['chain'];
    /** The key of the client. */
    key?: ClientConfig['key'];
    /** Mode of the test client. Available: "anvil" | "hardhat" */
    mode: TMode;
    /** The name of the client. */
    name?: ClientConfig['name'];
    /** Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. */
    pollingInterval?: ClientConfig['pollingInterval'];
    transport: ClientConfig<TTransport, TChain>['transport'];
};
type TestClient<TTransport extends Transport = Transport, TChain extends Chain = Chain, TMode extends TestClientModes = TestClientModes, TIncludeActions extends boolean = true> = Client<TTransport, TChain, TestRequests<TMode>> & {
    mode: TMode;
} & (TIncludeActions extends true ? TestActions<TChain> : {});
/**
 * @description Creates a test client with a given transport.
 */
declare function createTestClient<TTransport extends Transport, TChain extends Chain, TMode extends TestClientModes>({ chain, key, name, mode, pollingInterval, transport, }: TestClientConfig<TTransport, TChain, TMode>): TestClient<TTransport, TChain, TMode, true>;

type TestActions<TChain extends Chain = Chain> = {
    dropTransaction: (args: DropTransactionParameters) => Promise<void>;
    getAutomine: () => Promise<GetAutomineReturnType>;
    getTxpoolContent: () => Promise<GetTxpoolContentReturnType>;
    getTxpoolStatus: () => Promise<GetTxpoolStatusReturnType>;
    impersonateAccount: (args: ImpersonateAccountParameters) => Promise<void>;
    increaseTime: (args: IncreaseTimeParameters) => Promise<Quantity>;
    inspectTxpool: () => Promise<InspectTxpoolReturnType>;
    mine: (args: MineParameters) => Promise<void>;
    removeBlockTimestampInterval: () => Promise<void>;
    reset: (args?: ResetParameters) => Promise<void>;
    revert: (args: RevertParameters) => Promise<void>;
    sendUnsignedTransaction: (args: SendUnsignedTransactionParameters) => Promise<SendUnsignedTransactionReturnType>;
    setAutomine: (args: boolean) => Promise<void>;
    setBalance: (args: SetBalanceParameters) => Promise<void>;
    setBlockGasLimit: (args: SetBlockGasLimitParameters) => Promise<void>;
    setBlockTimestampInterval: (args: SetBlockTimestampIntervalParameters) => Promise<void>;
    setCode: (args: SetCodeParameters) => Promise<void>;
    setCoinbase: (args: SetCoinbaseParameters) => Promise<void>;
    setIntervalMining: (args: SetIntervalMiningParameters) => Promise<void>;
    setLoggingEnabled: (args: boolean) => Promise<void>;
    setMinGasPrice: (args: SetMinGasPriceParameters) => Promise<void>;
    setNextBlockBaseFeePerGas: (args: SetNextBlockBaseFeePerGasParameters) => Promise<void>;
    setNextBlockTimestamp: (args: SetNextBlockTimestampParameters) => Promise<void>;
    setNonce: (args: SetNonceParameters) => Promise<void>;
    setRpcUrl: (args: string) => Promise<void>;
    setStorageAt: (args: SetStorageAtParameters) => Promise<void>;
    snapshot: () => Promise<Quantity>;
    stopImpersonatingAccount: (args: StopImpersonatingAccountParameters) => Promise<void>;
};

export { RevertParameters as A, SendUnsignedTransactionReturnType as B, SetBalanceParameters as C, DropTransactionParameters as D, SetBlockGasLimitParameters as E, SetBlockTimestampIntervalParameters as F, SetCodeParameters as G, SetCoinbaseParameters as H, ImpersonateAccountParameters as I, SetIntervalMiningParameters as J, SetMinGasPriceParameters as K, SetNextBlockBaseFeePerGasParameters as L, MineParameters as M, SetNextBlockTimestampParameters as N, SetNonceParameters as O, SetStorageAtParameters as P, StopImpersonatingAccountParameters as Q, ResetParameters as R, SendUnsignedTransactionParameters as S, TestClient as T, TestClientConfig as a, getTxpoolContent as b, createTestClient as c, dropTransaction as d, getTxpoolStatus as e, increaseTime as f, getAutomine as g, inspectTxpool as h, impersonateAccount as i, revert as j, setBalance as k, setBlockGasLimit as l, mine as m, setBlockTimestampInterval as n, setCode as o, setCoinbase as p, setIntervalMining as q, reset as r, sendUnsignedTransaction as s, setMinGasPrice as t, setNextBlockBaseFeePerGas as u, setNextBlockTimestamp as v, setNonce as w, setStorageAt as x, stopImpersonatingAccount as y, IncreaseTimeParameters as z };
